<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teenyda.dao.ProductDao">

    <!-- spec_product_id, spec_name,spec_price, spec_quantity, spec_sku_id -->
    <resultMap type="com.teenyda.entity.Spec" id="SpecMap">
        <result property="specId" column="spec_id" jdbcType="INTEGER"/>
        <result property="productId" column="spec_product_id" jdbcType="INTEGER"/>
        <result property="specName" column="spec_name" jdbcType="VARCHAR"/>
        <result property="price" column="spec_price" jdbcType="NUMERIC"/>
        <result property="quantity" column="spec_quantity" jdbcType="INTEGER"/>

        <association property="sku" javaType="com.teenyda.entity.Sku">
            <id property="skuId" column="spec_sku_id" jdbcType="INTEGER"/>
            <result property="attrbute" column="attrbute" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <resultMap type="com.teenyda.entity.Discounts" id="DiscountsMap">
        <result property="discountsId" column="discounts_id" jdbcType="INTEGER"/>
        <result property="discountsExplain" column="discounts_explain" jdbcType="VARCHAR"/>
        <result property="conditions" column="conditions" jdbcType="INTEGER"/>
        <result property="conditionsExplain" column="conditions_explain" jdbcType="VARCHAR"/>
        <result property="discounts" column="discounts" jdbcType="VARCHAR"/>
        <result property="members" column="members" jdbcType="INTEGER"/>

        <association property="discountsCategory" javaType="com.teenyda.entity.DiscountsCategory">
            <id property="discountsCategoryId" column="discounts_category_id" jdbcType="INTEGER"/>
            <result property="discountsType" column="discounts_type" jdbcType="VARCHAR"/>
            <result property="discountsFlag" column="discounts_flag" jdbcType="INTEGER"/>
            <result property="discountsDescription" column="discounts_description" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <!--
        把列名product_id改为pii_product_id
        是因为ProductInfoImages的product_id与Product的product_id一样，
        没有数据时会填充一条null的数据[{piiId=null,productId=1,sort=null,url=null}]，而期待的是得到空数组[]，
        为了避免空数据，这里重复的列名要改一下
    -->
    <resultMap id="ProductInfoImagesMap" type="com.teenyda.entity.ProductInfoImage">
        <result property="piiId" column="pii_id" jdbcType="INTEGER"/>
        <result property="productId" column="pii_product_id" jdbcType="INTEGER"/>
        <result property="sort" column="pii_sort" jdbcType="INTEGER"/>
        <result property="url" column="pii_url" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="ProductBannerImagesMap" type="com.teenyda.entity.ProductBannerImage">
        <result property="pbiId" column="pbi_id" jdbcType="INTEGER"/>
        <result property="productId" column="pbi_product_id" jdbcType="INTEGER"/>
        <result property="type" column="pbi_type" jdbcType="INTEGER"/>
        <result property="url" column="pbi_url" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="TagsMap" type="com.teenyda.entity.Tag">
        <result property="tagId" column="tag_id" jdbcType="INTEGER"/>
        <result property="name" column="tag_name" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="CommentsMap" type="com.teenyda.entity.Comments">
        <result property="commentsId" column="comments_id" jdbcType="INTEGER"/>
<!--        <result property="user" column="user_id" jdbcType="INTEGER"/>-->
        <result property="productId" column="product_id" jdbcType="INTEGER"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="img1" column="img1" jdbcType="VARCHAR"/>
        <result property="img2" column="img2" jdbcType="VARCHAR"/>
        <result property="img3" column="img3" jdbcType="VARCHAR"/>
        <result property="audit" column="audit" jdbcType="INTEGER"/>
        <result property="reply" column="reply" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>

        <association property="user" javaType="com.teenyda.entity.User">
            <id property="userId" column="user_id" jdbcType="INTEGER"/>
            <result property="username" column="username" jdbcType="VARCHAR"/>
            <result property="password" column="password" jdbcType="VARCHAR"/>
            <result property="nickname" column="nickname" jdbcType="VARCHAR"/>
            <result property="email" column="email" jdbcType="VARCHAR"/>
            <result property="image" column="image" jdbcType="VARCHAR"/>
            <result property="qq" column="QQ" jdbcType="VARCHAR"/>
            <result property="mobile" column="mobile" jdbcType="VARCHAR"/>
            <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
            <result property="registerTime" column="register_time" jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>

    <resultMap type="com.teenyda.entity.Product" id="ProductMap">
        <result property="productId" column="product_id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="explain" column="explain" jdbcType="VARCHAR"/>
        <result property="shopPrice" column="shop_price" jdbcType="NUMERIC"/>
        <result property="price" column="price" jdbcType="NUMERIC"/>
        <result property="hot" column="hot" jdbcType="INTEGER"/>
        <result property="productStatus" column="product_status" jdbcType="INTEGER"/>
        <result property="defaultImg" column="default_img" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="updateUserId" column="update_user_id" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        <result property="createUserId" column="create_user_id" jdbcType="INTEGER"/>
        <result property="recommended" column="recommended" jdbcType="INTEGER"/>

        <association property="productCategory" javaType="com.teenyda.entity.ProductCategory">
            <id property="productCategoryId" column="product_category_id" jdbcType="INTEGER"/>
            <result property="name" column="pc_name" jdbcType="VARCHAR"/>
            <result property="sortOrder" column="sort_order" jdbcType="INTEGER"/>
            <result property="description" column="description" jdbcType="VARCHAR"/>
            <result property="image" column="image" jdbcType="VARCHAR"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
            <result property="updateUserId" column="update_user_id" jdbcType="INTEGER"/>
        </association>

        <collection property="spec" ofType="com.teenyda.entity.Spec"  resultMap="SpecMap" />

        <collection property="discounts" ofType="com.teenyda.entity.Discounts"  resultMap="DiscountsMap" />

        <collection property="productInfoImages" ofType="com.teenyda.entity.ProductInfoImage"  resultMap="ProductInfoImagesMap" />

        <collection property="productBannerImages" ofType="com.teenyda.entity.ProductBannerImage"  resultMap="ProductBannerImagesMap" />

        <collection property="tags" ofType="com.teenyda.entity.Tag"  resultMap="TagsMap" />

        <collection property="comments" ofType="com.teenyda.entity.Comments"  resultMap="CommentsMap" />

    </resultMap>


    <!--  查询产品和产品标签、用于展示简单的数据列表  -->
    <sql id="simpleColumn">
        SELECT
            product.*,
            pt.*,
            tag.tag_id,
            tag.NAME AS `tag_name`
        FROM
            product
            LEFT JOIN product_tag pt ON pt.product_id = product.product_id
            LEFT JOIN tag ON tag.tag_id = pt.tag_id
    </sql>
    <select id="simpleProduct" resultMap="simpleProductMap">
        <include refid="simpleColumn" />
    </select>
    <resultMap id="simpleProductMap" type="com.teenyda.controller.product.dto.SimpleProductDto">
        <result property="productId" column="product_id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="explain" column="explain" jdbcType="VARCHAR"/>
        <result property="shopPrice" column="shop_price" jdbcType="NUMERIC"/>
        <result property="price" column="price" jdbcType="NUMERIC"/>
        <result property="hot" column="hot" jdbcType="INTEGER"/>
        <result property="productStatus" column="product_status" jdbcType="INTEGER"/>
        <result property="defaultImg" column="default_img" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        <result property="recommended" column="recommended" jdbcType="INTEGER"/>

        <collection property="tags" ofType="com.teenyda.entity.Tag"  resultMap="TagsMap" />
    </resultMap>


    <sql id="baseSql">
        SELECT
            product.*,
            pc.product_category_id, pc.name as pc_name, pc.sort_order, pc.description, pc.image, pc.update_time,
            spec.spec_id, spec.product_id as spec_product_id, spec.spec_name, spec.price as spec_price, spec.quantity as spec_quantity, spec.sku_id as spec_sku_id,
            sku.*,
            discounts.*,
            dc.*,
            pii.pii_id, pii.product_id AS pii_product_id, pii.sort AS pii_sort,pii.url AS pii_url,
            pbi.pbi_id, pbi.product_id AS pbi_product_id, pbi.type AS pbi_type,pbi.url AS pbi_url,
            pt.*,
            tag.tag_id, tag.name as `tag_name`,
            comments.*,
	        `user`.*
        FROM
            product
            LEFT JOIN product_category pc ON product.product_category_id = pc.product_category_id
            LEFT JOIN spec ON product.product_id = spec.product_id
            LEFT JOIN sku ON spec.sku_id = sku.sku_id
            LEFT JOIN product_discounts pd ON product.product_id = pd.product_id
            LEFT JOIN discounts ON discounts.discounts_id = pd.discounts_id
            LEFT JOIN discounts_category dc ON dc.discounts_category_id = discounts.discounts_category_id
            LEFT JOIN product_info_image pii ON pii.product_id = product.product_id
            LEFT JOIN product_banner_image pbi ON pbi.product_id = product.product_id
            LEFT JOIN product_tag pt ON pt.product_id = product.product_id
            LEFT JOIN tag ON tag.tag_id = pt.tag_id
            LEFT JOIN comments ON comments.product_id = product.product_id
	        LEFT JOIN `user` ON `user`.user_id = comments.user_id
    </sql>

<!--    OrderProductDto-->
    <sql id="OrderProductSql">
        SELECT
            product.product_id,
            product.product_category_id,
            product.`name`,
            product.`explain`,
            product.hot,
            product.product_status,
            product.default_img,
            product.update_time,
            product.create_time,
            spec.spec_id,
            spec.spec_name,
            spec.price,
            sku.sku_id,
            sku.attrbute
        FROM
            product
            LEFT JOIN spec ON product.product_id = spec.product_id
            LEFT JOIN sku ON spec.sku_id = sku.sku_id
    </sql>
    <select id="orderProductByIdAndSpec" resultMap="OrderProductMap">
        <include refid="OrderProductSql" />
        WHERE product.product_id = #{productId}
        AND spec.spec_id = #{specId}
    </select>
    <resultMap id="OrderProductMap" type="com.teenyda.entity.OrderProductDto">
        <result property="productId" column="product_id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="explain" column="explain" jdbcType="VARCHAR"/>
        <result property="shopPrice" column="shop_price" jdbcType="NUMERIC"/>
        <result property="price" column="price" jdbcType="NUMERIC"/>
        <result property="hot" column="hot" jdbcType="INTEGER"/>
        <result property="productStatus" column="product_status" jdbcType="INTEGER"/>
        <result property="defaultImg" column="default_img" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
        <result property="recommended" column="recommended" jdbcType="INTEGER"/>
        <association property="spec" resultMap="SpecMap" />
    </resultMap>


    <!--查询单个-->
    <select id="queryById" resultMap="ProductMap">
        <include refid="baseSql" />
        where product.product_id = #{productId}
        ORDER BY pii.sort
    </select>


    <!--
       select
          product_id, product_category_id, name, explain, shop_price, price, hot, product_status, default_img, update_time, update_user_id, create_time, create_user_id
        from fruit.product
        limit #{offset}, #{limit}
      -->
    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="ProductMap">
        <include refid="baseSql" />
        limit #{offset}, #{limit}
    </select>

    <!-- 根据分类查询 -->
    <select id="queryByCategory" resultMap="ProductMap">
        <include refid="baseSql" />
        WHERE
        <foreach collection="categories" item="category" separator=" or ">
            pc.product_category_id = ${category.productCategoryId}
        </foreach>
    </select>

    <!--  app 根据分类ID  -->
    <select id="queryByCategoryId" resultMap="simpleProductMap">
        <include refid="simpleColumn" />
        WHERE product_category_id = ${categoryId}
    </select>

    <!-- 根据分类和状态查询 -->
    <select id="queryByCategoryAndStatus" resultMap="ProductMap">
        <include refid="baseSql" />
        WHERE
        product.product_status = #{status}
        <if test="null != categories and categories.size > 0">
            AND
            (
                <foreach collection="categories" item="category" separator=" or ">
                pc.product_category_id = #{category.productCategoryId}
                </foreach>
            )
        </if>
    </select>

    <!-- 根据分类和状态查询 -->
    <!--  使用like('%#{}%' 会出现Could not set parameters for mapping 错误，
    改为CONCAT('%',#{keyword},'%') 或者 ${query.name}-->
    <select id="query" resultMap="ProductMap" parameterType="com.teenyda.controller.product.dto.ProductQueryDto">
        <include refid="baseSql" />
        <where>
            <if test="null != query.name and '' != query.name">
                product.name like CONCAT('%',#{query.name},'%')
            </if>
            <if test="null != query.status">
                AND product.product_status = #{query.status}
            </if>
            <if test="null != query.categories and query.categories.size > 0">
                AND
                (
                <foreach collection="query.categories" item="category" separator=" or ">
                    pc.product_category_id = #{category.productCategoryId}
                </foreach>
                )
            </if>
        </where>
    </select>
<!--  SELECT
	product.*,
	pc.product_category_id,
	pc.NAME AS pc_name,
	pc.sort_order,
	pc.description,
	pc.image,
	pc.update_time,
	spec.*,
	sku.*,
	discounts.*,
	dc.*,
	pii.*,
	pbi.*,
	pt.*,
	tag.tag_id,
	tag.NAME AS `tag_name`,
	comments.*,
	`user`.*
FROM
	product
	LEFT JOIN product_category pc ON product.product_category_id = pc.product_category_id
	LEFT JOIN spec ON product.product_id = spec.product_id
	LEFT JOIN sku ON spec.sku_id = sku.sku_id
	LEFT JOIN product_discounts pd ON product.product_id = pd.product_id
	LEFT JOIN discounts ON discounts.discounts_id = pd.discounts_id
	LEFT JOIN discounts_category dc ON dc.discounts_category_id = discounts.discounts_category_id
	LEFT JOIN product_info_image pii ON pii.product_id = product.product_id
	LEFT JOIN product_banner_image pbi ON pbi.product_id = product.product_id
	LEFT JOIN product_tag pt ON pt.product_id = product.product_id
	LEFT JOIN tag ON tag.tag_id = pt.tag_id
	LEFT JOIN comments ON comments.product_id = product.product_id
	LEFT JOIN `user` ON `user`.user_id = comments.user_id
WHERE
product.product_status = 0
AND
product.`name` LIKE '%苹果%'
AND
(
	pc.product_category_id = 11001
	OR pc.product_category_id = 11003
	)

  -->

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="ProductMap">
        select
        product_id, product_category_id, name, explain, shop_price, price, hot, product_status, default_img,
        update_time, update_user_id, create_time, create_user_id
        from fruit.product
        <where>
            <if test="productId != null">
                and product_id = #{productId}
            </if>
            <if test="productCategoryId != null">
                and product_category_id = #{productCategoryId}
            </if>
            <if test="name != null and name != ''">
                and name = #{name}
            </if>
            <if test="explain != null and explain != ''">
                and explain = #{explain}
            </if>
            <if test="shopPrice != null">
                and shop_price = #{shopPrice}
            </if>
            <if test="price != null">
                and price = #{price}
            </if>
            <if test="hot != null">
                and hot = #{hot}
            </if>
            <if test="productStatus != null">
                and product_status = #{productStatus}
            </if>
            <if test="defaultImg != null and defaultImg != ''">
                and default_img = #{defaultImg}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="updateUserId != null">
                and update_user_id = #{updateUserId}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="createUserId != null">
                and create_user_id = #{createUserId}
            </if>
        </where>
    </select>

    <!--新增所有列-->
<!-- (product_category_id, name, explain, shop_price, price, hot, product_status, default_img, update_time, update_user_id, create_time, create_user_id)-->
    <insert id="insert" keyProperty="productId" useGeneratedKeys="true">
        insert into fruit.product


        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="productCategory != null and productCategory.productCategoryId != null">
                product_category_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="explain != null">
                `explain`,
            </if>
            <if test="shopPrice != null">
                shop_price,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="hot != null">
                hot,
            </if>
            <if test="productStatus != null">
                product_status,
            </if>
            <if test="defaultImg != null">
                default_img,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateUserId != null">
                update_user_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createUserId != null">
                create_user_id
            </if>
        </trim>

        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="productCategory != null and productCategory.productCategoryId != null">
                #{productCategory.productCategoryId},
            </if>
            <if test="name != null">
                #{name},
            </if>
            <if test="explain != null">
                #{explain},
            </if>
            <if test="shopPrice != null">
                #{shopPrice},
            </if>
            <if test="price != null">
                #{price},
            </if>
            <if test="hot != null">
                #{hot},
            </if>
            <if test="productStatus != null">
                #{productStatus},
            </if>
            <if test="defaultImg != null">
                #{defaultImg},
            </if>
            <if test="updateTime != null">
                #{updateTime},
            </if>
            <if test="updateUserId != null">
                #{updateUserId},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
            <if test="createUserId != null">
                #{createUserId})
            </if>
        </trim>
    </insert>

    <insert id="insertBatch" keyProperty="productId" useGeneratedKeys="true">
        insert into fruit.product(product_category_id, name, explain, shop_price, price, hot, product_status,
        default_img, update_time, update_user_id, create_time, create_user_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.productCategoryId}, #{entity.name}, #{entity.explain}, #{entity.shopPrice}, #{entity.price},
            #{entity.hot}, #{entity.productStatus}, #{entity.defaultImg}, #{entity.updateTime}, #{entity.updateUserId},
            #{entity.createTime}, #{entity.createUserId})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="productId" useGeneratedKeys="true">
        insert into fruit.product(product_category_id, name, explain, shop_price, price, hot, product_status,
        default_img, update_time, update_user_id, create_time, create_user_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.productCategoryId}, #{entity.name}, #{entity.explain}, #{entity.shopPrice}, #{entity.price},
            #{entity.hot}, #{entity.productStatus}, #{entity.defaultImg}, #{entity.updateTime}, #{entity.updateUserId},
            #{entity.createTime}, #{entity.createUserId})
        </foreach>
        on duplicate key update
        product_category_id = values(product_category_id) , name = values(name) , explain = values(explain) , shop_price
        = values(shop_price) , price = values(price) , hot = values(hot) , product_status = values(product_status) ,
        default_img = values(default_img) , update_time = values(update_time) , update_user_id = values(update_user_id)
        , create_time = values(create_time) , create_user_id = values(create_user_id)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update fruit.product
        <set>
            <if test="productCategory != null and productCategory.productCategoryId != null">
                product_category_id = #{productCategory.productCategoryId},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="explain != null and explain != ''">
                `explain` = #{explain},
            </if>
            <if test="shopPrice != null">
                shop_price = #{shopPrice},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="hot != null">
                hot = #{hot},
            </if>
            <if test="productStatus != null">
                product_status = #{productStatus},
            </if>
            <if test="defaultImg != null and defaultImg != ''">
                default_img = #{defaultImg},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="updateUserId != null">
                update_user_id = #{updateUserId},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="createUserId != null">
                create_user_id = #{createUserId},
            </if>
            <if test="recommended != null">
                recommended = #{recommended}
            </if>
        </set>
        where product_id = #{productId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from fruit.product where product_id = #{productId}
    </delete>

</mapper>